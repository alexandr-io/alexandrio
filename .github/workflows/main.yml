on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: ["Android", "Windows", "Linux", "macOS", "iOS"]
        include:
          - target: Android
            os: ubuntu-latest
          - target: Windows
            os: windows-latest
          - target: Linux
            os: ubuntu-latest
          - target: macOS
            os: macos-latest
          - target: iOS
            os: macos-latest

    name: ${{matrix.target}}
    runs-on: ${{matrix.os}}
    env:
      APP_TITLE: Alexandrio
      APP_NAME: alexandrio
      APP_PATH: alexandrio
      APP_ORG: com.alexandrio

    steps:
      - name: Set up sed
        if: matrix.os != 'macos-latest'
        run: echo "sed=sed" >> $GITHUB_ENV

      - name: Set up sed for macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-sed
          echo "sed=gsed" >> $GITHUB_ENV

      - name: Set up Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install zip

      - name: Checking out sigining keys
        uses: actions/checkout@v2
        if: matrix.target == 'Android' && github.repository_owner == 'alexandr-io'
        with:
          repository: alexandr-io/signingkeys
          ref: master
          token: ${{secrets.GHKEY}}
          path: signingkeys

      - name: Checking out epub library source code
        uses: actions/checkout@v2
        with:
          repository: alexandr-io/flutter_epub_reader
          path: flutter_epub_reader

      - name: Checking out pdf library source code
        uses: actions/checkout@v2
        with:
          repository: alexandr-io/flutter_pdf_parser
          path: flutter_pdf_parser

      - name: Checking out ${{env.APP_TITLE}} source code
        uses: actions/checkout@v2
        with:
          path: ${{env.APP_PATH}}

      - name: Setting up Java
        if: matrix.target == 'Android'
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      - name: Checking out Flutter
        uses: chatsen/flutter-action@master
        with:
          channel: "master"

      - name: Changing version number and build number to the Github Tag
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ${{env.APP_PATH}}
        run: |
          ${{env.sed}} -i "s/^version: .*$/version: ${GITHUB_REF/refs\/tags\//}/" ./pubspec.yaml
          cat ./pubspec.yaml

      - name: Check for flutter updates
        run: flutter upgrade

      - name: Patch a fix for gifs inside the Flutter framework
        run: |
          ${{env.sed}} -i '/_frameDuration = _nextFrame!.duration;/a \ \ \ \ \ \ if (_frameDuration!.inMilliseconds <= 10) _frameDuration = Duration(milliseconds: 100);' $(which flutter | head -n 1 | ${{env.sed}} -e 's/\\/\//g' -e 's/\/bin\/flutter.*//')/packages/flutter/lib/src/painting/image_stream.dart

      - name: Create project for Android
        working-directory: ${{env.APP_PATH}}
        if: matrix.target == 'Android'
        run: |
          flutter create --platforms android,ios --org ${{env.APP_ORG}} .
          # Allow building with a WebView on older platforms        # ${{env.sed}} -i 's/minSdkVersion 16/minSdkVersion 19/' ./android/app/build.gradle
          ${{env.sed}} -i '/<\/manifest>/i \ \ \ \ <uses-sdk tools:overrideLibrary="io.flutter.plugins.webviewflutter"/>' ./android/app/src/main/AndroidManifest.xml
          ${{env.sed}} -i '/.*package=".*".*/i \ \ \ \ xmlns:tools="http://schemas.android.com/tools"' ./android/app/src/main/AndroidManifest.xml
          # Change the app title
          ${{env.sed}} -i 's/android:label=".*"/android:label="${{env.APP_TITLE}}"/' ./android/app/src/main/AndroidManifest.xml
          # Add Internet permission
          ${{env.sed}} -i '/.*package=".*".*/a \ \ \ <uses-permission android:name="android.permission.INTERNET"/>' ./android/app/src/main/AndroidManifest.xml
          # Fix for some 3rd party libraries
          ${{env.sed}} -i '/.*release {.*/a \ \ \ \ \ \ \ \ \ \ \ \ shrinkResources false\n\ \ \ \ \ \ \ \ \ \ \ \ minifyEnabled false' ./android/app/build.gradle
          # Add support for drawing behind the navbar on Android 11+
          ${{env.sed}} -i "/io.flutter.embedding.android.FlutterActivity/a import android.os.Bundle\nimport android.os.Build\nimport androidx.annotation.NonNull\nimport io.flutter.embedding.android.FlutterActivityLaunchConfigs.BackgroundMode.transparent\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.plugins.GeneratedPluginRegistrant" $(find . -name "MainActivity.kt")
          ${{env.sed}} -i "/FlutterActivity()/a \ \ \ \ override fun onCreate(savedInstanceState: Bundle?) {\n\ \ \ \ \ \ \ \ super.onCreate(savedInstanceState)\n\ \ \ \ \ \ \ \ if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n\ \ \ \ \ \ \ \ \ \ \ \ window.setDecorFitsSystemWindows(false)\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }" $(find . -name "MainActivity.kt")

      - name: Add signing to the project for Android
        working-directory: ${{env.APP_PATH}}
        if: matrix.target == 'Android' && github.repository_owner == 'alexandr-io'
        run: |
          # Signing profile
          ${{env.sed}} -i '/android {/i def keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('\''../../signingkeys/key.properties'\'')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n' ./android/app/build.gradle
          ${{env.sed}} -i '/.*buildTypes {/i \ \ \ \ signingConfigs {\n\ \ \ \ \ \ \ \ release {\n\ \ \ \ \ \ \ \ \ \ \ \ keyAlias keystoreProperties['\''keyAlias'\'']\n\ \ \ \ \ \ \ \ \ \ \ \ keyPassword keystoreProperties['\''keyPassword'\'']\n\ \ \ \ \ \ \ \ \ \ \ \ storeFile keystoreProperties['\''storeFile'\''] ? file(keystoreProperties['\''storeFile'\'']) : null\n\ \ \ \ \ \ \ \ \ \ \ \ storePassword keystoreProperties['\''storePassword'\'']\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }' ./android/app/build.gradle
          ${{env.sed}} -i 's/signingConfig signingConfigs.debug/signingConfig signingConfigs.release/' ./android/app/build.gradle

      - name: Create project for iOS
        working-directory: ${{env.APP_PATH}}
        if: matrix.target == 'iOS'
        run: |
          flutter create --platforms ios,android --org ${{env.APP_ORG}} .
          # Add notification support on the native side
          ${{env.sed}} -i '/-> Bool {/a \ \ \ \ if #available(iOS 10.0, *) {\ \ \ \ \ \ UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate\ \ \ \ }' ./ios/Runner/AppDelegate.swift
          # Change the app title
          ${{env.sed}} -i 's/<string>${{env.APP_NAME}}<\/string>/<string>${{env.APP_TITLE}}<\/string>/' ./ios/Runner/Info.plist
          # Background modes
          ${{env.sed}} -i '/<dict>/a \ \ <key>UIBackgroundModes</key>\n\ \ <array>\n\ \ \ \ <string>audio</string>\n\ \ </array>' ios/Runner/Info.plist
          # Library usage description
          ${{env.sed}} -i '/<dict>/a \ \ <key>NSPhotoLibraryUsageDescription</key>\n\ \ <string>${{env.APP_TITLE}} requests to access your files to allow file selection.</string>' ios/Runner/Info.plist

      - name: Create project for Windows
        working-directory: ${{env.APP_PATH}}
        if: matrix.target == 'Windows'
        run: |
          flutter config --enable-windows-desktop
          flutter create --platforms windows --org ${{env.APP_ORG}} .

      - name: Create project for Linux
        working-directory: ${{env.APP_PATH}}
        if: matrix.target == 'Linux'
        run: |
          flutter config --enable-linux-desktop
          flutter create --platforms linux --org ${{env.APP_ORG}} .

      - name: Create project for macOS
        working-directory: ${{env.APP_PATH}}
        if: matrix.target == 'macOS'
        run: |
          flutter config --enable-macos-desktop
          flutter create --platforms macos --org ${{env.APP_ORG}} .
          # Add permissions for networking and file picker
          ${{env.sed}} -i '/<dict>/a \ \ <key>com.apple.security.network.client</key>\n\ \ <true/>' macos/Runner/Release.entitlements
          ${{env.sed}} -i '/<dict>/a \ \ <key>com.apple.security.files.user-selected.read-only</key>\n\ \ <true/>' macos/Runner/Release.entitlements
          ${{env.sed}} -i '/<dict>/a \ \ <key>com.apple.security.network.client</key>\n\ \ <true/>' macos/Runner/DebugProfile.entitlements
          ${{env.sed}} -i '/<dict>/a \ \ <key>com.apple.security.files.user-selected.read-only</key>\n\ \ <true/>' macos/Runner/DebugProfile.entitlements
          # Change the app title
          ${{env.sed}} -i 's/<string>$(PRODUCT_NAME)<\/string>/<string>${{env.APP_TITLE}}<\/string>/' ./macos/Runner/Info.plist

      - name: Cleaning up the test directory
        working-directory: ${{env.APP_PATH}}
        run: rm -rf test

      # - name: Temporarily fix generating icons for the app
      #   working-directory: ${{env.APP_PATH}}
      #   if: matrix.target == 'Android' || matrix.target == 'iOS'
      #   run: |
      #     ${{env.sed}} -i 's/minSdkVersion .*/minSdkVersion 21/' ./android/app/build.gradle

      - name: Building the application icons
        working-directory: ${{env.APP_PATH}}
        # if: matrix.target == 'Android' || matrix.target == 'iOS'
        run: flutter pub run flutter_appicon_generator:main

      # - name: Building the Windows icon
      #   working-directory: ${{env.APP_PATH}}
      #   if: matrix.target == 'Windows'
      #   run: cp -f assets/logo-original.ico windows/runner/resources/app_icon.ico

      # - name: Building the macOS icon
      #   working-directory: ${{env.APP_PATH}}
      #   if: matrix.target == 'macOS'
      #   run: |
      #     find macos/Runner/Assets.xcassets/AppIcon.appiconset -name "*.png" -exec cp assets/logo-original.png {} \;
      #     sips -Z 16 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_16.png
      #     sips -Z 32 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_32.png
      #     sips -Z 64 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_64.png
      #     sips -Z 128 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_128.png
      #     sips -Z 256 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_256.png
      #     sips -Z 512 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_512.png
      #     sips -Z 1024 macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_1024.png

      - name: Build on Android
        if: matrix.target == 'Android'
        working-directory: ${{env.APP_PATH}}
        run: flutter build apk

      - name: Build on iOS
        if: matrix.target == 'iOS'
        working-directory: ${{env.APP_PATH}}
        run: flutter build ios --no-codesign

      - name: Build on Windows
        if: matrix.target == 'Windows'
        working-directory: ${{env.APP_PATH}}
        run: flutter build windows

      - name: Build on Linux
        if: matrix.target == 'Linux'
        working-directory: ${{env.APP_PATH}}
        run: |
          sudo apt install libgtk-3-dev ninja-build
          flutter build linux

      - name: Build on macOS
        if: matrix.target == 'macOS'
        working-directory: ${{env.APP_PATH}}
        run: flutter build macos

      # iOS release
      - name: Preparing iOS release and converting .app to .ipa
        if: matrix.target == 'iOS'
        run: |
          mkdir -p release/Payload
          cp -rf ./${{env.APP_PATH}}/build/ios/iphoneos/Runner.app ./release/Payload/Runner.app
          ditto -c -k --sequesterRsrc --keepParent ./release/Payload ./release/iOS.ipa

      - name: Uploading iOS artifact
        if: matrix.target == 'iOS'
        uses: actions/upload-artifact@v2
        with:
          name: iOS.ipa
          path: ./release/iOS.ipa

      - name: Uploading iOS tagged release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.target == 'iOS'
        with:
          files: ./release/iOS.ipa
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # Android release
      - name: Preparing Android release
        if: matrix.target == 'Android'
        run: |
          mkdir release
          cp ./${{env.APP_PATH}}/build/app/outputs/flutter-apk/app-release.apk ./release/Android.apk

      - name: Uploading Android artifact
        if: matrix.target == 'Android'
        uses: actions/upload-artifact@v2
        with:
          name: Android.apk
          path: ./release/Android.apk

      - name: Uploading Android tagged release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.target == 'Android'
        with:
          files: ./release/Android.apk
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # Windows release
      - name: Preparing Windows release
        if: matrix.target == 'Windows'
        run: |
          # mkdir -p release
          cp -rf ./${{env.APP_PATH}}/build/windows/runner/Release ./release
          echo "powershell Compress-Archive release/* release/Windows.zip" | powershell

      - name: Uploading Windows artifact
        if: matrix.target == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: Windows.zip
          path: ./release/Windows.zip

      - name: Uploading Windows tagged release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.target == 'Windows'
        with:
          files: ./release/Windows.zip
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # macOS release
      - name: Preparing macOS release
        if: matrix.target == 'macOS'
        run: |
          mkdir -p release
          cp -rf ./${{env.APP_PATH}}/build/macos/Build/Products/Release/${{env.APP_NAME}}.app ./release/${{env.APP_TITLE}}.app
          cd release && zip -r ./macOS.zip ./${{env.APP_TITLE}}.app

      - name: Uploading macOS artifact
        if: matrix.target == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: macOS.zip
          path: ./release/macOS.zip

      - name: Uploading macOS tagged release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.target == 'macOS'
        with:
          files: ./release/macOS.zip
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # Linux release
      - name: Preparing Linux release
        if: matrix.target == 'Linux'
        run: |
          mkdir -p release
          cp -rf ./${{env.APP_PATH}}/build/linux/x64/release/bundle/* ./release
          cd release && zip -r ./Linux.zip .

      - name: Uploading Linux artifact
        if: matrix.target == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: Linux.zip
          path: ./release/Linux.zip

      - name: Uploading Linux tagged release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.target == 'Linux'
        with:
          files: ./release/Linux.zip
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
